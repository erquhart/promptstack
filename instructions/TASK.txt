This document serves as some special instructions for building the app promptstack.dev
**PromptStack** is an **open-source project** that provides a searchable directory of AI prompts and code-generation rules to enhance developer workflows.

1. Task Requirements Summary:
- Build a prompt directory
- each new prompt creates a new prompt card and link that can be shared separately
- Support user creation
-  **Searchable Directory**: Quickly find AI prompts and code generation rules tailored to your needs. 
- **Prompt Rating System**: Rate and discover top prompts in the directory.
- **Private & Public Prompts**: Option to keep prompts private or share them publicly.
- **Category Organization**: Prompts are organized into clear, functional categories.
- **GitHub Integration**: Automatically link GitHub profiles submitted with prompts.
- **Carbon Copy View**: View and copy prompts in a Carbon-style editor window.
- **Readme Support**: Find and submit README examples for AI and code gen projects.
- **Developer Tools**: Built-in roadmaps, prompt feedback, and engineering specs documentation.
- **SEO Optimized**: AI tool lists, prompt engineering insights, and metadata for better discoverability.

2. Main Components Needed:
- Database tables: users, prompts, ratings, categories
- Public APIs
- Internal AI
- Context loading 



3. future features
- public/private prompt cards
- database with Convex.dev
- login with Clerk
- start rating prompts in convex.dev
- comments on prompt pages slug pages

- prompt history
- prompt versioning
- prompt diffing
- prompt collaboration
- prompt history
- prompt versioning



Here's a step-by-step plan to implement public/private prompt cards:

1. Update Convex Schema:
   - Add an `isPublic` boolean field to your prompt card table
   - Add an `ownerId` field (if not already present) to link with Clerk user

2. Update Convex Access Rules:
   - Allow read access to cards where `isPublic` is true for all users
   - Allow read access to private cards only for the owner
   - Allow write access only to the card owner

3. Update UI:
   - Add a toggle/switch in the prompt card creation/edit form
   - Add a visibility indicator in the card display
   - Update card listing to filter based on visibility and ownership

4. Update Queries/Mutations:
   - Modify card creation mutation to include `isPublic` field
   - Update card listing query to handle visibility rules
   - Add toggle visibility mutation for existing cards

5. Testing:
   - Test card creation with both visibility options
   - Verify private cards are only visible to owners
   - Test visibility toggling
   - Verify public cards are visible to all users


